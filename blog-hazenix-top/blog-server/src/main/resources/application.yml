server:
  port: 9090

spring:
  profiles:
    active: dev
  main:
    allow-circular-references: true
  datasource:
    druid:
      driver-class-name: ${blog.datasource.driver-class-name}
      url: jdbc:mysql://${blog.datasource.host}:${blog.datasource.port}/${blog.datasource.database}?serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf-8&zeroDateTimeBehavior=convertToNull&useSSL=false&allowPublicKeyRetrieval=true&autoReconnect=true&rewriteBatchedStatements=true
      username: ${blog.datasource.username}
      password: ${blog.datasource.password}
  redis:
    host: ${blog.redis.host}
    port: ${blog.redis.port}
    password: ${blog.redis.password}
    database: ${blog.redis.database}

mybatis:
  #mapper配置文件
  mapper-locations: classpath:mapper/*.xml
  type-aliases-package: top.hazenix.entity
  configuration:
    #开启驼峰命名
    map-underscore-to-camel-case: true
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl

logging:
  level:
    com:
      blog:
        mapper: debug
        service: info
        controller: debug

blog:
  jwt:
    # 设置jwt签名加密时使用的秘钥
    admin-secret-key: ${blog.jwt.admin-secret-key}
    # 设置jwt过期时间
    admin-ttl: 43200000
    # 设置前端传递过来的令牌名称
    admin-token-name: ${blog.jwt.admin-token-name}
    enable: ${blog.jwt.enable}

    # 用户端jwt令牌相关配置
    # 设置jwt签名加密时使用的秘钥
    user-secret-key: ${blog.jwt.user-secret-key}
    # 设置jwt过期时间
    user-ttl: 43200000
    # 设置前端传递过来的令牌名称
    user-token-name: ${blog.jwt.user-token-name}
  wechat:
    appid: ${blog.wechat.appid}
    secret: ${blog.wechat.secret}
    mchid: ${blog.wechat.mchid}
    mchSerialNo: ${blog.wechat.mchSerialNo}
    privateKeyFilePath: ${blog.wechat.privateKeyFilePath}
    apiV3Key: ${blog.wechat.apiV3Key}
    weChatPayCertFilePath: ${blog.wechat.weChatPayCertFilePath}
    notifyUrl: ${blog.wechat.notifyUrl}
    refundNotifyUrl: ${blog.wechat.refundNotifyUrl}
  alioss:
    endpoint: ${blog.alioss.endpoint}
    access-key-id: ${blog.alioss.access-key-id}
    access-key-secret: ${blog.alioss.access-key-secret}
    bucket-name: ${blog.alioss.bucket-name}
  google:
    authorization:
      client:
        id: ${blog.google.authorization.client.id}
        secret: ${blog.google.authorization.client.secret}
      redirect:
        url: ${blog.google.authorization.redirect.url}
      application:
        name: ${blog.google.authorization.application.name}
      scope: ${blog.google.authorization.scope}